package org._03_template_method.ex01;

/**
 * Beverage - 음료 제조 템플릿 클래스
 *
 * Template Method 패턴의 AbstractClass 역할을 담당하는 추상 클래스입니다.
 * 모든 음료의 제조 과정에 대한 기본 알고리즘(골격)을 정의하고,
 * 음료별로 달라지는 세부 단계들은 하위 클래스에서 구현하도록 합니다.
 *
 * 이 클래스는 "물 끓이기 → 우리기 → 컵에 따르기 → 첨가물 넣기"라는
 * 공통된 음료 제조 프로세스를 정의하되, 구체적인 우리기 방법과
 * 첨가물은 각 음료 클래스에서 구현하도록 설계되었습니다.
 */
abstract class Beverage {

    /**
     * Template Method - 음료 제조의 전체 알고리즘을 정의
     *
     * 이 메서드는 Template Method 패턴의 핵심으로, 음료 제조의
     * 전체적인 흐름을 정의합니다. final로 선언하여 하위 클래스에서
     * 이 메서드를 오버라이드할 수 없도록 하여 알고리즘의 구조를 보호합니다.
     *
     * 알고리즘의 각 단계:
     * 1. boilWater() - 물 끓이기 (모든 음료 공통)
     * 2. brew() - 우리기 (음료별로 다름 - 추상 메서드)
     * 3. pourInCup() - 컵에 따르기 (모든 음료 공통)
     * 4. addCondiments() - 첨가물 넣기 (음료별로 다름 - 추상 메서드)
     */
    final void prepareRecipe() {
        boilWater();        // 1단계: 물 끓이기
        brew();             // 2단계: 우리기 (하위 클래스에서 구현)
        pourInCup();        // 3단계: 컵에 따르기
        addCondiments();    // 4단계: 첨가물 넣기 (하위 클래스에서 구현)
    }

    /**
     * 물 끓이기 - 모든 음료에 공통된 과정
     *
     * 이 메서드는 모든 음료 제조에서 동일한 방식으로 수행되므로
     * 상위 클래스에서 구현을 제공합니다. 하위 클래스에서 오버라이드할
     * 필요가 없는 공통 기능입니다.
     */
    void boilWater() {
        System.out.println("Boiling water");
    }

    /**
     * 컵에 따르기 - 모든 음료에 공통된 과정
     *
     * 물 끓이기와 마찬가지로 모든 음료에서 동일하게 수행되는 작업으로
     * 상위 클래스에서 기본 구현을 제공합니다.
     */
    void pourInCup() {
        System.out.println("Pouring into cup");
    }

    /**
     * 우리기 - 음료별로 다른 추상 메서드
     *
     * 각 음료마다 우리는 방법이 다르므로(커피는 드립, 차는 우려내기 등)
     * 추상 메서드로 정의하여 하위 클래스에서 반드시 구현하도록 강제합니다.
     *
     * Template Method 패턴에서 이런 메서드를 "Primitive Operation"이라고 합니다.
     */
    abstract void brew();

    /**
     * 첨가물 넣기 - 음료별로 다른 추상 메서드
     *
     * 각 음료마다 넣는 첨가물이 다르므로(커피는 설탕/크림, 차는 레몬 등)
     * 추상 메서드로 정의하여 하위 클래스에서 구체적으로 구현하도록 합니다.
     */
    abstract void addCondiments();
}